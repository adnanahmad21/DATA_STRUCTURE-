Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105


solution :::

class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int nge[] = new int[n];
        int pge[] = new int[n];
        int max=0;
        for (int i = n - 1; i >= 0; i--) {
            max=Math.max(height[i],max); // without stack way but internally logic come from monotonic tack
           nge[i]=max;
        }
    max=0;
        for (int i = 0; i<n; i++) {
           max=Math.max(height[i],max); // without stack way
           pge[i]=max;  
        }
        int ans=0;
        for(int i=0;i<n;i++)
        {
            ans+=Math.min(nge[i],pge[i])-height[i];
        }
        return ans;
    }
}