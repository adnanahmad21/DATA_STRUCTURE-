Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

 

Example 1:


Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]
Example 2:

Input: head = [2,1], x = 2
Output: [1,2]
 

Constraints:

The number of nodes in the list is in the range [0, 200].
-100 <= Node.val <= 100
-200 <= x <= 200




solution::


class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode left=new ListNode(-1);
        ListNode left1=left;
        ListNode right=new ListNode(-1);
        ListNode right1=right;
        ListNode temp=head;
        while(temp!=null)
        {
            if(temp.val<x) 
            {
                  ListNode  smaller=new ListNode(temp.val);
                  left1.next=smaller;
                  left1=smaller;
            }
            else
            {
                        ListNode  larger=new ListNode(temp.val);
                  right1.next=larger;
                  right1=larger;
            }
            temp=temp.next;
        }
        left1.next=right.next;
        return left.next;
    }
}

