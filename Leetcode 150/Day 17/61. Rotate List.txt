Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109





solution:::


class Solution {
    ListNode rev(ListNode temp) {
        ListNode curr = temp;
        ListNode prev = null;
        while (temp != null) {
            temp = temp.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
    }
    public ListNode rotateRight(ListNode head, int k) {
        int n = 0;
        if (head == null || head.next == null || k == 0)
            return head;
        ListNode prev1 = head;
        ListNode prev2 = head;
        ListNode temp = head;
        while (temp != null) {
            prev2 = temp;
            temp = temp.next;
            n++;
        }
        k = k % n;
        if(k==0) return head;
         head = rev(head);
        temp = head;
        for (int i = 1; i <= k; i++) {
            prev2 = temp;
            temp = temp.next;
        }
        prev2.next = null;
     head = rev(head);
     temp = rev(temp);
     prev2=temp;
     temp=head;
       while(temp.next!=null) temp=temp.next;
       temp.next=prev2;
        return head;
    }
}