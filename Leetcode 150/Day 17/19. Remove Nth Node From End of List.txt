Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz
 

Follow up: Could you do this in one pass?




solution::


class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        int k=0;
        if(head==null || head.next==null) return null;
        ListNode temp=head;
        while(temp!=null)
        {
            temp=temp.next;
            k++;
        }
        temp=head;
        ListNode prev=null;

        for(int i=1;i<k-n+1;i++)
        {
            prev=temp;
      temp=temp.next;
        }
        if(n==k) return temp.next;
        if(temp!=null )
         prev.next=temp.next;
        return head;
    }
}