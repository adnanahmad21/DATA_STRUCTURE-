Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
 

Follow-up: Can you solve the problem in O(1) extra memory space?




solution:::



class Solution {
    ListNode generate(ListNode temp,int k)
    {
        while(temp!=null && k-->0) temp=temp.next;
        return temp;
    }
    void rev(ListNode temp)
    {
        ListNode curr=temp;
        ListNode prev=null;
        while(temp!=null)
        {
            temp=temp.next;
            curr.next=prev;
            prev=curr;
            curr=temp;
        }
       // return prev;
    }
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp=head;
        ListNode prev=null;


        while(temp!=null)
        {

            ListNode kthNode=generate(temp,k-1);
            if(kthNode==null)
            {
                prev.next=temp;
                break;
            }
            ListNode nextNode=kthNode.next;
            kthNode.next=null;
            rev(temp);
            if(temp==head) head=kthNode;
            else prev.next=kthNode;
            prev=temp;
            temp=nextNode;


        }
        return head;
    }
}