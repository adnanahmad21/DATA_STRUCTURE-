Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false

Example 4:

Input: s = "([])"

Output: true

Example 5:

Input: s = "([)]"

Output: false

 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.




solution:::

class Solution {
    public boolean isValid(String s) {
        Stack<Character> st = new Stack<>();
        for (char x : s.toCharArray()) {
            if (st.isEmpty() && (x == ')' || x == '}' || x == ']'))
                return false;
            if (x == '(' || x == '{' || x == '[') {
                st.push(x);
            } else if (((st.peek() == '(' && x == ')') || (st.peek() == '{' && x == '}')
                    || (st.peek() == '[' && x == ']'))) {
                st.pop();
            } else if (((st.peek() == '(' && x != ')') || (st.peek() == '{' && x != '}')
                    || (st.peek() == '[' && x != ']'))) {
                return false;
            }

        }

        return st.isEmpty() ? true : false;
    }
}