Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The input is generated such that answer[i] is guaranteed to fit in a 32-bit integer.
 
solution:::


class Solution {
    public int[] productExceptSelf(int[] nums) {
        int ans[] = new int[nums.length];
        int cnt, prod1, prod2;
        cnt=0;
        prod1 = 1;
        prod2 = 1;
        for (int x : nums) {
            prod1 *= x;
            if (x == 0)
                cnt++;
            else
                prod2 *= x;

        }
        if(cnt>1) return ans;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==0)
            {
                ans[i]=prod2;
            }
            else ans[i]=prod1/nums[i];
        }
        return ans;
    }
}