Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.

 

Example 1:


Input: root = [4,2,6,1,3]
Output: 1
Example 2:


Input: root = [1,0,48,null,null,12,49]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [2, 104].
0 <= Node.val <= 105
 



solution:::


approach1::


class Solution {
    
    void solve(TreeNode root,List<Integer> list)
    {
        if(root==null) return;
        
      solve(root.left,list);
      list.add(root.val);
      solve(root.right,list);
    }
    public int getMinimumDifference(TreeNode root) {
      List<Integer> list=new ArrayList<>();
    solve(root,list);
    int ans=Integer.MAX_VALUE;
    for(int i=1;i<list.size();i++)
    {
        ans=Math.min(ans,list.get(i)-list.get(i-1));
    }
    return ans;

    }
}



approach2:::

class Solution {
    int ans = Integer.MAX_VALUE;
    TreeNode prev = null;

    void solve(TreeNode root) {
        if (root == null)
            return;
        solve(root.left);
        if (prev != null) {
            ans = Math.min(ans, root.val - prev.val);
        }
        prev = root;
        solve(root.right);
    }

    public int getMinimumDifference(TreeNode root) {
        solve(root);
        return ans;

    }
}