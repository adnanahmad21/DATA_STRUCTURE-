Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys strictly less than the node's key.
The right subtree of a node contains only nodes with keys strictly greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [2,1,3]
Output: true
Example 2:


Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1




solutions::


approach 1::


class Solution {
   TreeNode prev=null;
    public boolean isValidBST(TreeNode root) {
   if(root==null) return true;
 boolean left = isValidBST(root.left);
   if(prev!=null && root.val<=prev.val) return false;
   prev=root;
  boolean right= isValidBST(root.right);
 return left && right;
     }
}





approach2::

class Solution {
     void solve(TreeNode root,List<Integer> list)
    {
        if(root==null) return; 
      solve(root.left,list);
      list.add(root.val);
      solve(root.right,list);
    }
    public boolean isValidBST(TreeNode root) {
                  List<Integer> list=new ArrayList<>();
    solve(root,list);
    for(int i=1;i<list.size();i++)
    {
        if(list.get(i)<=list.get(i-1)) return false;
    }
    return true;
    }
}

