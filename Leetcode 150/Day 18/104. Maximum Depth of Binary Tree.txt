Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 3
Example 2:

Input: root = [1,null,2]
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-100 <= Node.val <= 100


solution::



using dfs::



class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null )
            return 0;
            else if( (root.left == null && root.right == null)) return 1;
        return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
    }
}




using bfs::


class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null) return 0;
        Queue<TreeNode> q=new ArrayDeque<>();
        q.add(root);
        int ans=0;
        while(q.size()>0)
        {
            int n=q.size();
            while(n-->0)
            {
                TreeNode temp=q.poll();
                if(temp.left!=null) q.add(temp.left);
                if(temp.right!=null) q.add(temp.right);

            }
            ans++;
        }
        return ans;

    }
}