Given an m x n matrix, return all elements of the matrix in spiral order.

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:


Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100


solution:::

row swap +transpose...

class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        int top = 0;
        int bottom = n - 1;
        while (top < bottom) {
            for (int i = 0; i < n; i++) {
                int temp = matrix[top][i];
                matrix[top][i] = matrix[bottom][i];
                matrix[bottom][i] = temp;
            }
            top++;
            bottom--;
        }
           for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                  int temp = matrix[i][j];
              matrix[i][j]=  matrix[j][i] ;
                matrix[j][i] = temp;
            }
        }
    }
}









for beginner::::: 
class Solution {
    public void rotate(int[][] matrix) {
        List<Integer> list=new ArrayList<>();
        int n=matrix.length;
        for(int i=n-1;i>=0;i--)
        {
            for(int j=0;j<n;j++) list.add(matrix[i][j]);
        }
        int k=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++) matrix[j][i]=list.get(k++);
        }
        
    }
}