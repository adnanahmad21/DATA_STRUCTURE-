You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.

You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.

Return the answers to all queries. If a single answer cannot be determined, return -1.0.

Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.

Note: The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.

 

Example 1:

Input: equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? 
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]
note: x is undefined => -1.0
Example 2:

Input: equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
Output: [3.75000,0.40000,5.00000,0.20000]
Example 3:

Input: equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
Output: [0.50000,2.00000,-1.00000,-1.00000]
 

Constraints:

1 <= equations.length <= 20
equations[i].length == 2
1 <= Ai.length, Bi.length <= 5
values.length == equations.length
0.0 < values[i] <= 20.0
1 <= queries.length <= 20
queries[i].length == 2
1 <= Cj.length, Dj.length <= 5
Ai, Bi, Cj, Dj consist of lower case English letters and digits.






solutions:::


class Solution {
    class Pair {
        String edge;
        double value;

        Pair(String edge, double value) {
            this.edge = edge;
            this.value = value;
        }
    }

    void dfs(Map<String, List<Pair>> adj, Set<String> set, double ans[], double[] prod, String src, String dest) {
        if (set.contains(src))
            return;
        set.add(src);
        if (src.equals(dest)) {
            ans[0] = prod[0];
            return;
        }
        for (Pair p : adj.get(src)) {
            String u = p.edge;
            double val = p.value;
            prod[0] = prod[0] * val;
            dfs(adj, set, ans, prod, u, dest);
            prod[0] = prod[0] / val;

        }
    }

    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {

        int n = equations.size();
        Map<String, List<Pair>> adj = new HashMap<>();
        for (int i = 0; i < n; i++) {
            List<String> temp = equations.get(i);
            String src = temp.get(0);
            String dest = temp.get(1);
            adj.putIfAbsent(src, new ArrayList<>());
            adj.putIfAbsent(dest, new ArrayList<>());

        }
        for (int i = 0; i < n; i++) {
            List<String> temp = equations.get(i);
            String src = temp.get(0);
            String dest = temp.get(1);
            adj.get(src).add(new Pair(dest, values[i]));
            adj.get(dest).add(new Pair(src, 1.0 / values[i]));
        }
        double ans[] = new double[queries.size()];
        int i = 0;
        for (List<String> temp : queries) {
            String src = temp.get(0);
            String dest = temp.get(1);
            double res[] = new double[1];
            double prod[] = new double[1];
            res[0] = -1.0;
            prod[0] = 1.0;

            if (adj.containsKey(src)) {
                Set<String> set = new HashSet<>();
                dfs(adj, set, res, prod, src, dest);
            }
            ans[i++] = res[0];
        }
        return ans;
    }
}