You are given an m x n matrix board containing letters 'X' and 'O', capture regions that are surrounded:

Connect: A cell is connected to adjacent cells horizontally or vertically.
Region: To form a region connect every 'O' cell.
Surround: The region is surrounded with 'X' cells if you can connect the region with 'X' cells and none of the region cells are on the edge of the board.
To capture a surrounded region, replace all 'O's with 'X's in-place within the original board. You do not need to return anything.

 

Example 1:

Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]

Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]

Explanation:


In the above diagram, the bottom region is not captured because it is on the edge of the board and cannot be surrounded.

Example 2:

Input: board = [["X"]]

Output: [["X"]]

 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] is 'X' or 'O'.




solution::



approach1::

class Solution {
    void bfs(char grid[][], int x, int y, boolean vis[][]) {
        int m = grid.length;
        int n = grid[0].length;
        int dx[] = { -1, 0, 1, 0 };
        int dy[] = { 0, -1, 0, 1 };
        Queue<int[]> q = new ArrayDeque<>();
        vis[x][y]=true;
        q.add(new int[] { x, y });
        while (q.size() > 0) {
            int arr[] = q.poll();
            int i = arr[0];
            int j = arr[1];
            for (int x1 = 0; x1 < 4; x1++) {
                int i_ = i + dx[x1];
                int j_ = j + dy[x1];
 if (i_ >= 0 && i_ < m && j_ >= 0 && j_ < n && grid[i_][j_] == 'O' && vis[i_][j_]==false) 
 {

                    q.add(new int[] { i_, j_ });
                    vis[i_][j_] = true;
                }
            }
        }
    }

    public void solve(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean visited[][]=new boolean[m][n];
        for(int i=0,j=0;i<m && j<n;j++)
        {
           if(grid[i][j]=='O')
           bfs(grid,i,j,visited);
        }
        for(int i=0,j=0;i<m && j<n;i++)
        {
           if(grid[i][j]=='O')
           bfs(grid,i,j,visited);
        }
        for(int i=m-1,j=0;i<m && j<n;j++)
        {
           if(grid[i][j]=='O')
           bfs(grid,i,j,visited);
        }
        for(int i=0,j=n-1;i<m && j<n;i++)
        {
           if(grid[i][j]=='O')
           bfs(grid,i,j,visited);
        }
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]!='X'&& visited[i][j]==false) grid[i][j]='X';
            }
        }

    }
}




approach2::



class Solution {
    void dfs(char grid[][], int i, int j, boolean vis[][]) {
        int m = grid.length;
        int n = grid[0].length;
        int dx[] = { -1, 0, 1, 0 };
        int dy[] = { 0, -1, 0, 1 };
        vis[i][j] = true;
        for (int x1 = 0; x1 < 4; x1++) {
            int i_ = i + dx[x1];
            int j_ = j + dy[x1];
            if (i_ >= 0 && i_ < m && j_ >= 0 && j_ < n && grid[i_][j_] == 'O' && vis[i_][j_] == false) {
                vis[i_][j_] = true;
                dfs(grid, i_, j_, vis);

            }
        }

    }
    public void solve(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean visited[][] = new boolean[m][n];
        for (int i = 0, j = 0; i < m && j < n; j++) {
            if (grid[i][j] == 'O')
                dfs(grid, i, j, visited);
        }
        for (int i = 0, j = 0; i < m && j < n; i++) {
            if (grid[i][j] == 'O')
                dfs(grid, i, j, visited);
        }
        for (int i = m - 1, j = 0; i < m && j < n; j++) {
            if (grid[i][j] == 'O')
                dfs(grid, i, j, visited);
        }
        for (int i = 0, j = n - 1; i < m && j < n; i++) {
            if (grid[i][j] == 'O')
                dfs(grid, i, j, visited);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] != 'X' && visited[i][j] == false)
                    grid[i][j] = 'X';
            }
        }

    }
}