Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.





solution:::


approach1 :



class Solution {
    void bfs(char grid[][],int x,int y,boolean vis[][])
    {
           int m=grid.length;
        int n=grid[0].length;
        int dx[]={-1,0,1,0};
        int dy[]={0,-1,0,1};
            Queue<int[]> q=new ArrayDeque<>();
                q.add(new int[]{x,y});
                while(q.size()>0)
                {
                    int arr[]=q.poll();
                    int i=arr[0];
                    int j=arr[1];
                    for(int x1=0;x1<4;x1++)
                    {
                        int i_=i+dx[x1];
                        int j_=j+dy[x1];
                        if(i_>=0 && i_<m && j_>=0 && j_<n && grid[i_][j_]=='1')
                        {
                            
                            q.add(new int[]{i_,j_});
                            grid[i_][j_]='0';
                        }
                    }
                }
    }
    public int numIslands(char[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int ans=0;
        boolean visited[][]=new boolean[m][n];
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
               if(grid[i][j]=='1')
               {
                bfs(grid,i,j,visited);
                ans++;
               }
            }
        }
        return ans;
    }
}





approach2::




class Solution {
    void dfs(char grid[][], int i, int j, boolean vis[][]) {
        int m = grid.length;
        int n = grid[0].length;
        int dx[] = { -1, 0, 1, 0 };
        int dy[] = { 0, -1, 0, 1 };
        for (int x1 = 0; x1 < 4; x1++) {
            int i_ = i + dx[x1];
            int j_ = j + dy[x1];
            if (i_ >= 0 && i_ < m && j_ >= 0 && j_ < n && grid[i_][j_] == '1') {
                grid[i_][j_] = '0';
                dfs(grid, i_, j_, vis);

            }
        }
    }

    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int ans = 0;
        boolean visited[][] = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1') {
                    dfs(grid, i, j, visited);
                    ans++;
                }
            }
        }
        return ans;
    }
}