Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.
Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104


solution::


note.. remember this test case:: [[1,4],[2,3]]


class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        int i = 0;
        int n = intervals.length;
        int k = -1;
        int ans[][] = new int[n][2];
        while (i < n) {
            if (k == -1) {
                k++;
                ans[k][0] = intervals[i][0];
                ans[k][1] = intervals[i][1];

            } else {
                if (ans[k][1] >= intervals[i][0] && ans[k][1] >= intervals[i][1]) {
                    i++;
                    continue;
                } else if (ans[k][1] >= intervals[i][0]) {
                    ans[k][1] = intervals[i][1];
                } else {
                    k++;
                    ans[k][0] = intervals[i][0];
                    ans[k][1] = intervals[i][1];
                }
            }
            i++;
        }

        return Arrays.copyOf(ans, k + 1);
    }
}