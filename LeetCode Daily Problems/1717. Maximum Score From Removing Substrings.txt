You are given a string s and two integers x and y. You can perform two types of operations any number of times.

Remove substring "ab" and gain x points.
For example, when removing "ab" from "cabxbae" it becomes "cxbae".
Remove substring "ba" and gain y points.
For example, when removing "ba" from "cabxbae" it becomes "cabxe".
Return the maximum points you can gain after applying the above operations on s.

 

Example 1:

Input: s = "cdbcbbaaabab", x = 4, y = 5
Output: 19
Explanation:
- Remove the "ba" underlined in "cdbcbbaaabab". Now, s = "cdbcbbaaab" and 5 points are added to the score.
- Remove the "ab" underlined in "cdbcbbaaab". Now, s = "cdbcbbaa" and 4 points are added to the score.
- Remove the "ba" underlined in "cdbcbbaa". Now, s = "cdbcba" and 5 points are added to the score.
- Remove the "ba" underlined in "cdbcba". Now, s = "cdbc" and 5 points are added to the score.
Total score = 5 + 4 + 5 + 5 = 19.
Example 2:

Input: s = "aabbaaxybbaabb", x = 5, y = 4
Output: 20
 

Constraints:

1 <= s.length <= 105
1 <= x, y <= 104
s consists of lowercase English letters.




 solution::

class Solution {
    class pair {
        int idx;
        char ch;
        pair(char ch, int idx) {
            this.ch = ch;
            this.idx = idx;
        }
    }

    int solve2(String s, Set<Integer> set, int val) {
        Stack<pair> st = new Stack<>();
        int cnt2=0;
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
             if(set.contains(i)) continue;
            if (ch != 'a' && ch != 'b') {
                st.clear();
                continue;
            }
            if (ch == 'b') {
                st.push(new pair(ch, i));
            } else {
                if (st.size() > 0 && ch == 'a') {
                    pair p = st.pop();
                    set.add(p.idx);
                    set.add(i);
                    cnt2++;

                }
            }
        }
        return cnt2*val;
    }
     int solve1(String s, Set<Integer> set, int val) {
        Stack<pair> st = new Stack<>();
        int cnt2=0;
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            if(set.contains(i)) continue;
            if (ch != 'a' && ch != 'b') {
                st.clear();
                continue;
            }
            if (ch == 'a') {
                st.push(new pair(ch, i));
            } else {
                if (st.size() > 0 && ch == 'b') {
                    pair p = st.pop();
                    set.add(p.idx);
                    set.add(i);
                    cnt2++;

                }
            }
        }
        return cnt2*val;
    }

    public int maximumGain(String s, int x, int y) {
        Set<Integer> set = new HashSet<>();
        int ans=0;
        if (x > y) {
            ans += solve1(s, set, x);
            ans += solve2(s, set, y);


        } else {
            ans += solve2(s, set, y);
            ans += solve1(s, set, x);

        }
        return ans;

    }
}